# ------ DockerFile for running various scripts and codes
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND noninteractive

# setup environment
RUN apt-get update \
    && apt-get install -y --no-install-recommends python3-pip \
    libnetcdf-dev \
    libgdal-dev \
    libgeos-dev \
    proj-data \
    python3-gdal \
    python3-dev \
    g++ \
    gfortran \
    ffmpeg \
    cmake \
    make \
    ghostscript \
    gmt-gshhg \
    gmt-dcw \
    gdal-bin \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# install GMT from source. Default GMT is otherwise too old (6.0.0)
# GMT can be downloaded from here: https://github.com/GenericMappingTools/gmt/releases/tag/6.4.0
COPY gmt-6.4.0-src.tar.gz / 

# build GMT. Also remove files and cmake/make after
RUN tar xvf /gmt-6.4.0-src.tar.gz \
    && cp gmt-6.4.0/cmake/ConfigUserTemplate.cmake gmt-6.4.0/cmake/ConfigUser.cmake \
    && mkdir gmt-6.4.0/build \
    && cd gmt-6.4.0/build \
    && cmake .. \
    && cmake --build . \
    && cmake --build . --target install \
    && cd ../.. \
    && rm /gmt-6.4.0-src.tar.gz && rm -r /gmt-6.4.0 \
    && apt remove cmake -y \
    && apt remove make -y

# install pygplates!
# Copy both amd64 and arm64 versions, and then check which one we need
# PyGPlates can be downloaded from here: https://www.earthbyte.org/download-pygplates-0-36/
COPY pygplates_*-22.04-*.deb /

## Check the architecture, and install the correct pygplates
RUN arch=$(arch | sed s/aarch64/arm64/ | sed s/x86_64/amd64/) \
    && apt-get update \
    && apt install -y -f ./pygplates_0.36.0_py310_ubuntu-22.04-$arch.deb\
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm /pygplates_*.deb

# set pythonpath
ENV PYTHONPATH=$PYTHONPATH:/usr/lib

# install Cython
RUN pip3 install --no-cache-dir Cython	 

# ------
# add user
ENV NB_USER jovyan
ENV NB_HOME /home/$NB_USER
RUN useradd -m -s /bin/bash -N $NB_USER -g users \
    &&  mkdir -p /$NB_HOME/workspace \
    &&  chown -R $NB_USER:users $NB_HOME
VOLUME $NB_HOME/workspace

# switch user
USER $NB_USER
WORKDIR $NB_HOME

# ------
# install various python packages
# --no-cache-dir (and doing it all in one RUN command) is my attempt to try and reduce the image size
RUN pip3 install --no-cache-dir shapely --no-binary shapely \
    && pip3 install --no-cache-dir pygmt \
        jupyterlab \
        pandas \
        xarray \
        numpy \
        matplotlib \
        scipy \
        datetime \
        rasterio \
        geopandas \
        rioxarray \
        cartopy \
        PlateTectonicTools \
        gplately \
        stripy \
        moviepy \
        joblib \
        scikit-learn \
        pyyaml

# This will copy things into the docker 
COPY . $NB_HOME
ENV PATH "/$NB_HOME/.local/bin:${PATH}"

EXPOSE 8888
CMD ["jupyter-lab", "--no-browser", "--ip=0.0.0.0"]